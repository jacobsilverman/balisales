{"version":3,"file":"static/js/223.70eeb1c3.chunk.js","mappings":"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","sources":["Components/Body/Post/DeleteModal/DeleteModal.js","Components/Body/Post/EditModal/EditModal.js"],"sourcesContent":["import { Modal } from '@mui/material';\nimport { Button, Col, Row } from 'react-bootstrap';\n\nconst DeleteModal = ({deletePost, item, openDeleteModal, setOpenDeleteModal}) => {\n    return (\n        <Modal open={openDeleteModal} id=\"delete-modal\">\n            <Row className=\"modal-dialog delete-modal\">\n                <Col xs={5} sm={5} md={2} className=\"modal-content modal-background center\">\n                    <Row className=\"modal-header\">\n                        <Col className=\"modal-title\">Do you want to delete this post?</Col>\n                    </Row>\n                    <Row>\n                    <Col xs={6}>\n                            <Button onClick={() => setOpenDeleteModal(false)}>no</Button>\n                        </Col>\n                        <Col xs={6}>\n                            <Button onClick={() => {deletePost(item);setOpenDeleteModal(false)}}>yes</Button>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Modal>\n    );\n};\n\nexport default DeleteModal;","import { useState } from 'react';\n\nimport { brands, types } from '../../../../Data/Constants';\n\nimport DeleteModal from '../DeleteModal/DeleteModal';\n\nimport { Grid, MenuItem, Modal, TextareaAutosize } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport Select from '@mui/material/Select';\nimport { Button, Col, Row } from 'react-bootstrap';\n\nimport { doc, setDoc } from 'firebase/firestore';\nimport { db } from '../../../../firebase-config';\n\nimport { FaImage } from \"react-icons/fa\";\n\nimport { ref, getStorage } from \"firebase/storage\";\n\nconst EditModal = ({item, openEditModal, setOpenEditModal, deletePost}) => {\n    const [title, setTitle] = useState(item.title);\n    const [description, setDescription] = useState(item.description);\n    const [type, setType] = useState(item.type);\n    const [brand, setBrand] = useState(item.brand);\n    const [condition, setCondition] = useState(item.condition);\n    const [price, setPrice] = useState(item.price);\n    const [openDeleteModal, setOpenDeleteModal] = useState(false);\n    const [numberOfImages, setNumberOfImages] = useState(item.numberOfImages);\n    const [removedImages, setRemovedImages] = useState({});\n\n\n    // State to store uploaded file\n    const [file, setFile] = useState(\"\");\n    \n    // Handle file upload event and update state\n    function handleChange(event) {\n        setFile(event.target.files[0]);\n    }\n\n    const getOptions = (options) => {\n        return options.map((name, key) => {\n            return <MenuItem key={key} value={name}>{name}</MenuItem>;\n        });\n    };\n\n    const editPost = async () => {\n        const postDocRef = doc(db, \"posts\", item.id);\n        await setDoc(postDocRef, {\n            title,\n            type,\n            brand, \n            condition,\n            price,\n            description,\n            timeStamp: Date.now(),\n            numberOfImages: numberOfImages,\n            author: {name: item.author.name, id: item.author.id }\n        }).then(() => {\n            const pictureRef = ref(getStorage(), `PostImages/${item.id}/image-0`);\n            console.log(\"pictureRef: \", pictureRef);\n            // uploadBytesResumable(pictureRef, file);\n        }).catch((error) => {\n            console.error(\"problem: \", error)\n        }).finally(() => {\n            window.location.reload();\n        });\n    }\n\n    const handleImageClick = (url) => {\n        setRemovedImages(cur => {\n            cur[url] = !cur[url] ?? true\n            return cur;\n        });\n        console.log(removedImages);\n    }\n\n    const pictures = (\n        <Grid container>\n            {item.urls.map((url) => {\n                return (\n                    <Grid item key={url} className=\"center\" style={{backgroundImage: `url(${url})`, backgroundSize: \"100% 100%\", width: \"100px\", height: \"100px\"}} onClick={() => handleImageClick(url)} >\n                        {removedImages[url]}\n                    </Grid>\n                )})}\n        </Grid>\n    );\n\n    const addPicture = (\n        <Row className=\"edit-input\">    \n            {/* <Col className=\"center\">\n                <input type=\"file\" onChange={handleChange} accept=\"/image/*\" />\n            </Col> */}\n            <Col xs={12} className=\"setting-item\">\n                <label className='profile-label' htmlFor=\"inputTag\">\n                    <span style={{color:\"black\"}}>Add Picture</span>\n                    <input id=\"inputTag\" className='profile-input' type=\"file\" onChange={handleChange} accept=\"/image/*\" />\n                    <br />\n                    {<FaImage size={40}  />}\n                </label>\n            </Col>\n        </Row>\n    );\n\n    return (\n        <Modal open={openEditModal}>\n            <Row className=\"edit-modal\">\n                <Col xs={7} className=\"modal-background center\">\n                    <DeleteModal deletePost={deletePost} item={item} openDeleteModal={openDeleteModal} setOpenDeleteModal={setOpenDeleteModal} />\n                    <Row className=\"edit-input\">\n                        <Col xs={6} sm={9} className=\"left\">\n                            <h2>Edit</h2>\n                        </Col>\n                        <Col xs={6} sm={3}>\n                            <Button variant=\"danger\" onClick={(e) => {e.preventDefault();setOpenDeleteModal(true);}}>Delete</Button>\n                        </Col>\n                    </Row>\n                    <Row className=\"edit-input\">\n                        <TextField fullWidth size=\"small\" value={title} label=\"Title\" className=\"input-width\" onChange={(event) => setTitle(event.target.value)} />\n                    </Row>\n                    <Row className=\"edit-input\">\n                        <TextField fullWidth size=\"small\" value={price} label=\"Price\" className=\"input-width\" onChange={(event) => setPrice(event.target.value)} />\n                    </Row>\n                    <Row className=\"edit-input\">\n                        <FormControl fullWidth>\n                            <InputLabel size=\"small\" id=\"brand-edit-label\">Brand</InputLabel>\n                            <Select\n                                labelId=\"brand-edit-label\"\n                                id=\"brand-edit-select\"\n                                size=\"small\"\n                                value={brand}\n                                label=\"Brand\"\n                                onChange={(event) => setBrand(event.target.value)}>\n                                {getOptions(brands, brand)}\n                            </Select>\n                        </FormControl>\n                    </Row>\n                    <Row className=\"edit-input\">\n                        <FormControl fullWidth>\n                            <InputLabel size=\"small\" id=\"business-edit-label\">Business</InputLabel>\n                            <Select\n                                labelId=\"business-edit-label\"\n                                id=\"business-edit-select\"\n                                size=\"small\"\n                                value={type}\n                                label=\"Business\"\n                                onChange={(event) => setType(event.target.value)}>\n                                {getOptions(types, type)}\n                            </Select>\n                        </FormControl>\n                    </Row>\n                    <Row className=\"edit-input\">\n                        <FormControl fullWidth>\n                            <InputLabel size=\"small\" id=\"condition-edit-label\">Condition</InputLabel>\n                            <Select\n                                labelId=\"condition-edit-label\"\n                                id=\"condition-edit-select\"\n                                size=\"small\"\n                                value={condition}\n                                label=\"Condition\"\n                                onChange={(event) => setCondition(event.target.value)}>\n                                {getOptions([1,2,3,4,5,6,7,8,9,10], condition)}\n                            </Select>\n                        </FormControl>\n                    </Row>\n                    <Row className=\"edit-input\">\n                        <TextareaAutosize fullwidth=\"true\" minRows={3} value={description} placeholder=\"Description\" label=\"description\" onChange={(event) => setDescription(event.target.value)} />\n                    </Row>\n                    {/* {addPicture}\n                    {pictures} */}\n                    <Row className=\"edit-input\">\n                        <Col xs={6}>\n                            <Button onClick={() => setOpenEditModal(false)}>Cancel</Button>\n                        </Col>\n                        <Col xs={6}>\n                            <Button onClick={() => {editPost();setOpenEditModal(false)}}>Submit</Button>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Modal>\n    );\n};\n\nexport default EditModal;"],"names":["deletePost","item","openDeleteModal","setOpenDeleteModal","Modal","open","id","Row","className","Col","xs","sm","md","Button","onClick","openEditModal","setOpenEditModal","useState","title","setTitle","description","setDescription","type","setType","brand","setBrand","condition","setCondition","price","setPrice","numberOfImages","removedImages","setRemovedImages","setFile","getOptions","options","map","name","key","MenuItem","value","editPost","postDocRef","doc","db","setDoc","timeStamp","Date","now","author","then","pictureRef","ref","getStorage","console","log","catch","error","finally","window","location","reload","Grid","urls","url","style","backgroundImage","backgroundSize","width","height","cur","handleImageClick","variant","e","preventDefault","TextField","fullWidth","size","label","onChange","event","target","FormControl","InputLabel","Select","labelId","brands","types","TextareaAutosize","fullwidth","minRows","placeholder"],"sourceRoot":""}