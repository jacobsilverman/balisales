{"version":3,"file":"static/js/670.681d1c67.chunk.js","mappings":"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","sources":["Components/Body/Body.js","Components/Body/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// import { ClipLoader } from 'react-spinners';\r\n\r\nimport { Button, Col, Container, Row } from 'react-bootstrap';\r\n\r\nimport Grid from '@mui/material/Grid';\r\n\r\nimport './Body.scss';\r\n\r\nconst Filter = React.lazy(() => import('./Filter'));\r\nconst Post = React.lazy(() => import('./Post'));\r\n\r\nfunction Body({ posts }) {\r\n    const [min, setMin] = useState(0);\r\n    const [max, setMax] = useState(10000);\r\n    const [brand, setBrand] = useState('default');\r\n    const [type, setType] = useState('default');\r\n    const [displayFilter, setDisplayFilter] = useState(false); // whether the filter is open or not\r\n    const [sort, setSort] = useState('default');\r\n    const [viewCount, setViewCount] = useState('default');\r\n    const [blade, setBlade] = useState('default');\r\n    const [status, setStatus] = useState('default');\r\n    // const [windowScroll, setWindowScroll] = useState(0); \r\n\r\n    // useEffect(() => {\r\n    //     document.addEventListener('scroll', () => {\r\n    //         setWindowScroll(window.pageYOffset > 99);\r\n    //     });\r\n    // }, [])\r\n\r\n    const resetFilter = () => {\r\n        setMin(0);\r\n        setMax(10000);\r\n        setBrand('default');\r\n        setType('default');\r\n        setSort('default');\r\n        setViewCount('default');\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (sort === 'default') return data;\r\n   \r\n        return [...data].sort((prev, next) => {\r\n            if (sort === 'max') return (prev.price <= next.price) ? 1 : -1;\r\n            return (prev.price >= next.price) ? 1 : -1;\r\n        });\r\n    };\r\n    \r\n    const validFilter = (post) => {\r\n        return post?.price >= min \r\n            && post?.price <= max \r\n            && (post.brand === brand || brand === 'default') \r\n            && (post.type === type || type === 'default')\r\n            && (post.blade === blade || blade === 'default')\r\n            && (post.status === status || status === 'default');\r\n    };\r\n\r\n    var divideData = () => {\r\n        // if (posts.length === 0) {\r\n        //     return (\r\n        //         <Row >\r\n        //             <Col xs={12} className=\"center\">\r\n        //                 <ClipLoader size={150} />\r\n        //             </Col> \r\n        //         </Row>\r\n        //     );\r\n        // }\r\n        let allPosts = sortData(posts);\r\n        let result = [];\r\n        let partition = [];\r\n        for (let i=0; i< allPosts.length; i++){\r\n            validFilter(allPosts[i]) && partition.push(allPosts[i]);\r\n            if ((i+1)%3===0 || i === allPosts.length-1) {\r\n                result.push(partition);\r\n                partition = [];\r\n            }\r\n            \r\n        };\r\n        return (\r\n            <Grid container className=\"grid-container-posts\">\r\n                {result.map((arr) => {\r\n                    return arr.map((item) => {\r\n                        return <Post item={item} viewCount={viewCount} key={item.id} />\r\n                    })\r\n                })}\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    // const topFix = (windowScroll) ? 'fixed-top filter-container' : 'filter-container';\r\n    // const topMargin = (windowScroll && displayFilter) ? 'remove-padding post-margin' : 'remove-padding';\r\n    const topFix = 'filter-container';\r\n    const topMargin = 'remove-padding';\r\n    const openFilterButton = (<span className=\"filter-button-container\"><Button className={'filter-button ' + topFix} onClick={() => {setDisplayFilter(true)}}><b>FILTER</b></Button></span>);\r\n    const filter = (\r\n        <Col xs={12} className={topFix}>\r\n            <Filter \r\n                brand={brand} setBrand={setBrand} \r\n                type={type} setMax={setMax} \r\n                min={min} setMin={setMin} \r\n                max={max} setType={setType} \r\n                setDisplayFilter={setDisplayFilter} \r\n                resetFilter={resetFilter}\r\n                sort={sort} setSort={setSort} \r\n                viewCount={viewCount} setViewCount={setViewCount}\r\n                blade={blade} setBlade={setBlade}\r\n                status={status} setStatus={setStatus} />\r\n        </Col>\r\n    );\r\n\r\n    return (\r\n        <Container className='body-container'>\r\n            <Row>\r\n                {(displayFilter && filter) || openFilterButton}\r\n                <Col xs={12} className={topMargin}>\r\n                    {divideData()}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Body;","import Body from './Body.js';\r\n\r\nexport default Body;"],"names":["Filter","React","Post","posts","useState","min","setMin","max","setMax","brand","setBrand","type","setType","displayFilter","setDisplayFilter","sort","setSort","viewCount","setViewCount","blade","setBlade","status","setStatus","topFix","openFilterButton","className","Button","onClick","filter","Col","xs","resetFilter","Container","Row","data","post","allPosts","prev","next","price","result","partition","i","length","push","Grid","container","map","arr","item","id","divideData"],"sourceRoot":""}