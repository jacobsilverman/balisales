{"version":3,"file":"static/js/985.e60ad318.chunk.js","mappings":"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","sources":["Components/Account/Account.js","Data/Services/geocode.js","Components/Map/index.js","Components/Map/Map.js","Components/Profile/index.js","Components/Profile/Profile.js"],"sourcesContent":["\nimport React, { useEffect, useState } from 'react';\n\nimport Spinner from '../../Data/Constants/Spinner.js';\n\nimport Post from '../Body/Posts/Post';\n\nimport { getUserPosts } from '../../Data/Services/userInfo';\nimport { useTranslation } from 'react-i18next';\n\nconst EditModal  = React.lazy(() => import('../../Components/Body/Posts/Post/EditModal'));\nconst SelectModal  = React.lazy(() => import('../../Components/Body/Posts/Post/SelectModal'));\n\nfunction Account({user, settingsPage}) {\n\tconst [filterPosts, setFilterPosts] = useState([]);\n\tconst [openEditModal, setOpenEditModal] = useState(false);\n\tconst [openSelectModal, setOpenSelectModal] = useState({show: false, item: null});\n\n\tconst [selectedPost, setSelectedPost] = useState({});\n\n\tconst [loaded, setLoaded] = useState(false);\n\tconst { t } = useTranslation();\n\n\tuseEffect(() => {\n        getUserPosts(user).then((result) => {\n\t\t\tresult.sort((a, b) => {\n\t\t\t\treturn b.timeStamp-a.timeStamp;\n\t\t\t});\n            setFilterPosts(result);\n        }).catch(() => {\n            console.error(\"cant get user posts\");\n        }).finally(() => {\n\t\t\tsetLoaded(true);\n\t\t});\n\t}, []);\n\t\n\tconst setAccountData = () => {\n\t\tif (filterPosts?.length === 0) {\n\t\t\treturn (\n\t\t\t\t(!loaded) ? <Spinner /> : null\n\t\t\t);\n\t\t} \n\n\t\treturn (\n\t\t\t<div style={{padding:'20px'}} className=\"grid-container-posts\">\n\t\t\t\t\n\t\t\t\t{openSelectModal.show && \n                    <SelectModal t={t} \n                        item={openSelectModal.item} \n                        openSelectModal={openSelectModal.show} \n                        setOpenSelectModal={setOpenSelectModal} />}\n\t\t\t\t\n\t\t\t\t{settingsPage && <EditModal \n\t\t\t\t\titem={selectedPost} \n\t\t\t\t\tfilterPosts={filterPosts}\n\t\t\t\t\tsetFilterPosts={setFilterPosts}\n\t\t\t\t\topenEditModal={openEditModal} \n\t\t\t\t\tsetOpenEditModal={setOpenEditModal} />}\n\t\t\t\t{filterPosts?.map((item) => {\n\t\t\t\t\tconst displayUrl =  `url(${item?.urls[0]})`;\n\t\t\t\t\tconst queryParam = 'id='+item?.id;\n\t\t\t\t\treturn <Post \n\t\t\t\t\t\tdisplayUrl={displayUrl}\n\t\t\t\t\t\titem={item}\n\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\tqueryParam={queryParam}\n\t\t\t\t\t\tsettingsPage={settingsPage}\n\t\t\t\t\t\topenSelectModal={openSelectModal}\n\t\t\t\t\t\tsetOpenSelectModal={setOpenSelectModal}\n\t\t\t\t\t\topenEditModal={openEditModal}\n\t\t\t\t\t\tsetOpenEditModal={setOpenEditModal}\n\t\t\t\t\t\tselectedPost={selectedPost}\n\t\t\t\t\t\tsetSelectedPost={setSelectedPost} />\n\t\t\t\t\t\t\n\t\t\t\t})}\n\t\t\t</div>\n        );\n    }\n\n\treturn setAccountData();\n}\n\nexport default Account;","import Geocode from \"react-geocode\";\r\n\r\n// set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\r\nGeocode.setApiKey(\"AIzaSyDwxyCrcshK6kl2ICi5UCtepIqNgPz36T4\");\r\n\r\n// set response language. Defaults to english.\r\nGeocode.setLanguage(\"en\");\r\n\r\n// set response region. Its optional.\r\n// A Geocoding request with region=es (Spain) will return the Spanish city.\r\nGeocode.setRegion(\"es\");\r\n\r\n// set location_type filter . Its optional.\r\n// google geocoder returns more that one address for given lat/lng.\r\n// In some case we need one address as response for which google itself provides a location_type filter.\r\n// So we can easily parse the result for fetching address components\r\n// ROOFTOP, RANGE_INTERPOLATED, GEOMETRIC_CENTER, APPROXIMATE are the accepted values.\r\n// And according to the below google docs in description, ROOFTOP param returns the most accurate result.\r\nGeocode.setLocationType(\"ROOFTOP\");\r\n\r\n// Enable or disable logs. Its optional.\r\nGeocode.enableDebug();\r\n\r\n// Get address from latitude & longitude.\r\n// Geocode.fromLatLng(\"48.8583701\", \"2.2922926\").then(\r\n//   (response) => {\r\n//     const address = response.results[0].formatted_address;\r\n//     console.log(address);\r\n//   },\r\n//   (error) => {\r\n//     console.error(error);\r\n//   }\r\n// );\r\n\r\n// Get formatted address, city, state, country from latitude & longitude when\r\n// Geocode.setLocationType(\"ROOFTOP\") enabled\r\n// the below parser will work for most of the countries\r\n// Geocode.fromLatLng(\"48.8583701\", \"2.2922926\").then(\r\n//   (response) => {\r\n//     const address = response.results[0].formatted_address;\r\n//     let city, state, country;\r\n//     for (let i = 0; i < response.results[0].address_components.length; i++) {\r\n//       for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\r\n//         switch (response.results[0].address_components[i].types[j]) {\r\n//           case \"locality\":\r\n//             city = response.results[0].address_components[i].long_name;\r\n//             break;\r\n//           case \"administrative_area_level_1\":\r\n//             state = response.results[0].address_components[i].long_name;\r\n//             break;\r\n//           case \"country\":\r\n//             country = response.results[0].address_components[i].long_name;\r\n//             break;\r\n//         }\r\n//       }\r\n//     }\r\n//     console.log(city, state, country);\r\n//     console.log(address);\r\n//   },\r\n//   (error) => {\r\n//     console.error(error);\r\n//   }\r\n// );\r\n\r\n// Get latitude & longitude from address.\r\nexport const getLongitudeLatitude = (address) => {\r\n    return Geocode.fromAddress(address).then(\r\n        (response) => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n          return {\"lat\": lat, \"lng\": lng};\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      );\r\n}","import Map from './Map.js';\r\n\r\nexport default Map;","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { GoogleMap, Marker } from '@react-google-maps/api';\r\nimport { getLongitudeLatitude } from '../../Data/Services/geocode';\r\n\r\nconst Map = ({address, width, height}) => {\r\n    const [initial, setInitial] = useState(true);\r\n    const [longitudeLatitude, setLongitudeLatitude] = useState([]);\r\n\r\n    const mapStyles = {\r\n        height: height,\r\n        width: width\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (initial) {\r\n            setInitial(false);\r\n            return;\r\n        }\r\n        if (address?.address && address?.city){\r\n            const location = `${address?.address} ${address?.unit} ${address?.city} ${address?.state} ${address?.country} ${address?.zipcode}`;\r\n            getLongitudeLatitude(location).then((result) => {\r\n                setLongitudeLatitude(result);\r\n            });\r\n        }\r\n    }, [address]);\r\n\r\n    const render = useMemo(() => {\r\n        if (initial) {\r\n            setInitial(false);\r\n            return\r\n        }\r\n\r\n        return (\r\n            <GoogleMap\r\n                icon=\"here\"\r\n                mapContainerStyle={mapStyles}\r\n                zoom={10}\r\n                center={longitudeLatitude}>\r\n                    <Marker key=\"5\" position={longitudeLatitude} />\r\n            </GoogleMap>\r\n        )\r\n    }, [longitudeLatitude]);\r\n\r\n    return render;\r\n}\r\n\r\nexport default Map;","import Profile from './Profile.js';\r\n\r\nexport default Profile;","import { useEffect, useState } from 'react';\r\n\r\nimport { getUserInfo, getProfilePicture } from '../../Data/Services/userInfo.js';\r\nimport defaultProfile from '../../Data/Images/default-profile.jpg';\r\n\r\nimport Account from '../Account/Account';\r\nimport Map from '../Map';\r\nimport SocialMedia from '../SocialMedia/SocialMedia.js';\r\nimport { SocialIcon } from 'react-social-icons';\r\n\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\n\r\nconst Profile = () => {\r\n    const [userData, setUserData] = useState({});\r\n    const [profilePic, setProfilePic] = useState(null);\r\n\r\n    const urlSearchParams = new URLSearchParams(window.location.search);\r\n    const params = Object.fromEntries(urlSearchParams.entries());\r\n\r\n    useEffect(() => {\r\n        getUserInfo(params.id).then((result) => {\r\n            setUserData(result);\r\n        });\r\n\r\n        getProfilePicture(params.id).then((result) => {\r\n            setProfilePic(result);\r\n        }).catch(() => {\r\n            setProfilePic(defaultProfile);\r\n        });\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <Container className=\"user-profile-container\">\r\n            <Row>\r\n                <Col xs={4} sm={3} className=\"user-account-profile-col\">\r\n                    <Row className=\"center\">\r\n                        <Col>\r\n                            <h2>{userData.displayName}</h2>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col className=\"profile-image center\">\r\n                            <div className=\"user-account-profile center\" style={{backgroundImage: `url(${profilePic})`}} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"center\">\r\n                        <Col>\r\n                            <h3>{userData.firstName} {userData.lastName}</h3>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"center social-media-container\">\r\n                        {userData?.instagram && <Col sm={6} lg={3}  className=\"item\">\r\n                            <SocialIcon url={userData.instagram} />\r\n                        </Col>}\r\n                        {userData?.facebook && <Col sm={6} lg={3} className=\"item\">\r\n                            <SocialIcon url={userData.facebook} />\r\n                        </Col>}\r\n                        {userData?.phoneNumber && <Col sm={6} lg={3} className=\"item\">\r\n                            <SocialIcon url={\"tel:\"+userData.phoneNumber} network=\"telegram\" />\r\n                        </Col>}\r\n                        <Col sm={6} lg={3} className=\"item\">\r\n                            <SocialIcon url=\"https://discord.com/channels/@jacoboson#8145\" />\r\n                        </Col>\r\n                        <Col sm={6} lg={3} className=\"item\">\r\n                            <SocialIcon url=\"https://twitter.com/imVkohli\" />\r\n                        </Col>\r\n                        <Col sm={6} lg={3} className=\"item\">\r\n                            <SocialIcon url=\"https://www.youtube.com/channel/UCWzKQGtfgLhCBdXsFORsoTA\" />\r\n                        </Col>\r\n                        <Col sm={6} lg={3} className=\"item\">\r\n                            <SocialIcon url=\"https://www.twitch.tv/dank_satan\" />\r\n                        </Col>\r\n                        <Col sm={6} lg={3} className=\"item\">\r\n                            <SocialIcon url=\"https://www.twitch.tv/dank_satan\" />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n                <Col xs={8} sm={9}>\r\n                    {userData?.address &&\r\n                    <Row>\r\n                        <Col style={{display:'flex', justifyContent:'center', padding: \"30px\"}}>\r\n                            <Map address={userData.address} width=\"800px\" height=\"400px\" />\r\n                        </Col>\r\n                    </Row>}\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n                {/* <Col xs={9}>\r\n                    <SocialMedia \r\n                        instagram={userData.instagram}\r\n                        facebook={userData.facebook}\r\n                        phoneNumber={userData.phoneNumber} />\r\n                </Col>\r\n            </Row> */}\r\n            {/* <Row className=\"center\">\r\n                <Col xs={12}>\r\n                     <h3>{userData.firstName} {userData.lastName}</h3>\r\n                </Col>\r\n            </Row> */}\r\n            \r\n            <hr style={{margin:\"0\"}} />\r\n            <Account user={params.id} settingsPage={false} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Profile;"],"names":["EditModal","React","SelectModal","user","settingsPage","useState","filterPosts","setFilterPosts","openEditModal","setOpenEditModal","show","item","openSelectModal","setOpenSelectModal","selectedPost","setSelectedPost","loaded","setLoaded","t","useTranslation","useEffect","getUserPosts","then","result","sort","a","b","timeStamp","catch","console","error","finally","length","style","padding","className","map","displayUrl","urls","queryParam","id","Geocode","address","width","height","initial","setInitial","longitudeLatitude","setLongitudeLatitude","mapStyles","city","response","results","geometry","location","lat","lng","getLongitudeLatitude","unit","state","country","zipcode","useMemo","icon","mapContainerStyle","zoom","center","position","userData","setUserData","profilePic","setProfilePic","urlSearchParams","URLSearchParams","window","search","params","Object","fromEntries","entries","getUserInfo","getProfilePicture","defaultProfile","Container","xs","sm","displayName","backgroundImage","firstName","lastName","instagram","lg","url","facebook","phoneNumber","network","display","justifyContent","Map","margin","Account"],"sourceRoot":""}